#!/bin/bash
# Collect all unittests that have been built in ldc dir for the
# unittest Xcode project.  Two files are created: (1) a list of
# unittest .o files that actually have a unittest to be linked with ld
# -filelist option, and (2) a lib of all unittest .o files because
# there is some unittests support code in modules without unittests.

usage()
{
    echo >&2 'usage: collect-unittests release|debug build-dir'
}

if [ $# != 2 ]; then
   usage
   exit 1
fi

case "$1" in
    debug)   name=debug; pat='*-unittest-debug.o';;
    release) name=release; pat='*-unittest.o';;
    *) usage; exit 1;;
esac

if [ ! -d $2 ]; then
   echo >&2 "$2 should be build directory"
   usage
   exit 1
fi

# Add tools dir to PATH for iphoneos-ldc2
toolsdir=$(cd `dirname $BASH_SOURCE[0]`; pwd)
PATH=$toolsdir:$PATH

# build dir as an absolute dir
builddir=`cd $2; pwd`

# find all unittest .o build from ldc make
files=`find $builddir/ldc/runtime -name $pat`

# list of .o that have actual unittests to link into Xcode unittest
# project with -filelist linker option.
unittests=$builddir/unittests-$name

# only some modules have real unittests, so only collect those
# skip curl because we don't currently have libcurl
echo "collecting modules with unittests in $unittests"
for f in $files; do
  nm $f | grep -q unittest && echo $f | grep -v 'std/net/curl'
done >$unittests

# Create a unittest_config module that has unittest_configname.
(cd $builddir; cat >unittest_config_$name.d <<-EOF
	module unittest_config;
	extern (C) const char* unittest_configname = "$name";
	EOF
 iphoneos-ldc2 -c unittest_config_$name.d)

# lib of all .o unittest because some are needed for support.
libname=$builddir/libunittest-$name.a
echo "making $libname with compiled unittests"
rm -f $libname
ar q $libname $files $builddir/unittest_config_$name.o

num=`cat $unittests|wc -l`

if [ $num = 0 ]; then
    echo "Something is wrong, didn't find any unittests.  Did you make them?"
    exit 1
fi

